<!DOCTYPE html>
<html>
  <head>
    <title>Transfer</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Raleway"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
    <style>
      body,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-family: "Raleway", sans-serif;
      }

      body,
      html {
        height: 100%;
        line-height: 1.8;
      }

      /* Full height image header */
      .bgimg-1 {
        background-position: center;
        background-size: cover;
        background-image: url("https://images.unsplash.com/photo-1639322537228-f710d846310a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1032&q=80");
        min-height: 100%;
      }

      .w3-bar .w3-button {
        padding: 16px;
      }
    </style>
  </head>
  <body>
    <!-- Navbar (sit on top) -->
    <div class="w3-top">
      <div class="w3-bar w3-white w3-card" id="myNavbar">
        <a href="/" class="w3-bar-item w3-button w3-wide">EROS-ANTEROS</a>
        <!-- Right-sided navbar links -->
        <div class="w3-right w3-hide-small">
          <!-- <a href="#about" class="w3-bar-item w3-button">ABOUT</a> -->
          <!-- <!-- <a href="#team" class="w3-bar-item w3-button"
            ><i class="fa fa-user"></i> TEAM</a
          > -->
          <!-- <a href="#work" class="w3-bar-item w3-button"
            ><i class="fa fa-th"></i> WORK</a
          >
          <a href="#pricing" class="w3-bar-item w3-button"
            ><i class="fa fa-usd"></i> PRICING</a
          > -->
          <a href="/newProducts" class="w3-bar-item w3-button">MINT NFTs</a>
        </div>
        <!-- Hide right-floated links on small screens and replace them with a menu icon -->

        <a
          href="javascript:void(0)"
          class="w3-bar-item w3-button w3-right w3-hide-large w3-hide-medium"
          onclick="w3_open()"
        >
          <i class="fa fa-bars"></i>
        </a>
      </div>
    </div>

    <!-- Sidebar on small screens when clicking the menu icon -->
    <nav
      class="w3-sidebar w3-bar-block w3-black w3-card w3-animate-left w3-hide-medium w3-hide-large"
      style="display: none"
      id="mySidebar"
    >
      <a
        href="javascript:void(0)"
        onclick="w3_close()"
        class="w3-bar-item w3-button w3-large w3-padding-16"
        >Close Ã—</a
      >
      <a href="#about" onclick="w3_close()" class="w3-bar-item w3-button"
        >ABOUT</a
      >
      <a href="#team" onclick="w3_close()" class="w3-bar-item w3-button"
        >TEAM</a
      >
      <a href="#work" onclick="w3_close()" class="w3-bar-item w3-button"
        >WORK</a
      >
      <a href="#pricing" onclick="w3_close()" class="w3-bar-item w3-button"
        >PRICING</a
      >
      <a href="#contact" onclick="w3_close()" class="w3-bar-item w3-button"
        >CONTACT</a
      >
    </nav>

    <!-- Header with full-height image -->
    <header
      class="bgimg-1 w3-display-container w3-grayscale-min d-flex"
      id="home"
    >
      <!--Form-->

      <div
        class="w3-display-bottomleft w3-text-grey w3-large w3-d-flex"
        style="padding: 24px 48px"
      ></div>
    </header>

    <div
      style="
        display: flex;
        justify-content: space-around;
        border-radius: 10px;
        top: 120px;
        margin-left: 35%;
        height: 70vh;
        background-color: rgba(0, 107, 149, 0.592);
        position: absolute;
      "
    >
      <form
        action="/transfer"
        method="POST"
        style="
          display: flex;
          flex-direction: column;
          justify-content: space-around;
        "
      >
        <label
          style="
            padding: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
          "
          id="nft_address"
          class="question"
          for="Contact_Address"
          >Contact Address -<br /><input
            style="
              margin-left: 20px;
              border-radius: 5px;
              border: none;
              justify-content: space-between;
            "
            name="Contact_Address"
            type="text"
            id="maaChuda"
            required
        /></label>
        <label
          style="
            padding: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
          "
          id="Reciever_Address"
          class="question"
          for="Reciever_Address"
          >Reciever's Address -<br /><input
            style="
              margin-left: 20px;
              border-radius: 5px;
              border: none;
              justify-content: space-between;
            "
            name="Reciever_Address"
            type="text"
            id="customer"
            required
        /></label>
        <label
          style="
            padding: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
          "
          id="Token_ID"
          class="question"
          for="Token_ID"
          >Token Id -<br /><input
            style="
              margin-left: 20px;
              border-radius: 5px;
              border: none;
              justify-content: space-around;
            "
            name="Token_ID"
            type="text"
            id="token_id"
            required
        /></label>
        <input
          type="submit"
          style="
            height: 7vh;
            cursor: pointer;
            width: 15vw;
            align-items: center;
            align-self: center;
            border-radius: 50px;
            background-color: rgb(147, 10, 74);
            border: none;
          "
          onclick="lessgo()"
        />
      </form>
    </div>
    <style>
      form {
        font-weight: bold;
        color: aliceblue;
      }
    </style>

    <script>
      const abi = [
        {
          inputs: [
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "symbol",
              type: "string",
            },
            {
              internalType: "string",
              name: "uree",
              type: "string",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "approved",
              type: "address",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "Approval",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "ApprovalForAll",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              indexed: true,
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "Transfer",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "approve",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "getApproved",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
          ],
          name: "isApprovedForAll",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "mint",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "name",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "ownerOf",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "safeTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "_data",
              type: "bytes",
            },
          ],
          name: "safeTransferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "operator",
              type: "address",
            },
            {
              internalType: "bool",
              name: "approved",
              type: "bool",
            },
          ],
          name: "setApprovalForAll",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4",
            },
          ],
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "symbol",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "tokenURI",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenID",
              type: "uint256",
            },
          ],
          name: "transfer",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "tokenId",
              type: "uint256",
            },
          ],
          name: "transferFrom",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "uri",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ];

      async function lessgo() {
        // e.preventDefault();
        const Reciever_Address = document.getElementById("customer").value;
        const Token_ID = document.getElementById("token_id").value;
        const Contract_Address = document.getElementById("maaChuda").value;
        console.log(Reciever_Address);
        console.log(Token_ID);
        console.log(Contract_Address);
        const provider = new ethers.providers.Web3Provider(
          window.ethereum,
          "rinkeby"
        );

        // await provider.send("eth_requestAccounts", []).then();
        const accounts = await provider.listAccounts();
        console.log(accounts);

        const signer = provider.getSigner(accounts[0]);
        console.log(signer);

        const contract = new ethers.Contract(Contract_Address, abi, signer);
        contract.connect(signer);
        console.log(contract);
        const tx = await contract.transfer(Reciever_Address, Token_ID);
        await tx.wait();
        console.log(tx);
        alert("Transaction Successful");
      }
    </script>
  </body>
</html>
